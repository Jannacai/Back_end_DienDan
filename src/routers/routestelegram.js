const express = require('express');
const router = express.Router();
const TelegramBot = require('node-telegram-bot-api');

const token = process.env.TELEGRAM_BOT_TOKEN || '7789171652:AAEmz2GIO5WECWE2K1o-d6bve3vdvFctLCg';
const bot = new TelegramBot(token);
const BASE_API_URL = 'https://backendkqxs.onrender.com/api/kqxs';

router.post('/', async (req, res) => {
    const update = req.body;
    try {
        console.log('Nh·∫≠n y√™u c·∫ßu t·ª´ Telegram:', JSON.stringify(req.body, null, 2));
        const { default: fetch } = await import('node-fetch');
        if (!update.message || !update.message.text) {
            console.log('Kh√¥ng c√≥ message ho·∫∑c text trong y√™u c·∫ßu');
            return res.status(200).send('OK');
        }

        const chatId = update.message.chat.id;
        const text = update.message.text.trim();
        const command = text.split(' ')[0].toLowerCase();
        const args = text.split(' ').slice(1);

        const sendLongMessage = async (chatId, text) => {
            const maxLength = 4096;
            for (let i = 0; i < text.length; i += maxLength) {
                await bot.sendMessage(chatId, text.slice(i, i + maxLength));
            }
        };

        const callApi = async (endpoint, params = {}) => {
            const query = new URLSearchParams(params).toString();
            const url = `${BASE_API_URL}${endpoint}${query ? '?' + query : ''}`;
            console.log('G·ªçi API:', url);
            const response = await fetch(url, {
                headers: { 'x-user-id': 'bot' },
                method: 'GET',
            });
            if (response.status !== 200) {
                throw new Error(`L·ªói khi g·ªçi API ${endpoint}: ${response.statusText}`);
            }
            return await response.json();
        };

        // H√†m ki·ªÉm tra URL ·∫£nh
        const checkImageUrl = async (url) => {
            try {
                const response = await fetch(url, { method: 'HEAD' });
                const contentType = response.headers.get('content-type');
                if (!contentType || !contentType.startsWith('image/')) {
                    throw new Error(`URL ${url} kh√¥ng tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng ·∫£nh h·ª£p l·ªá: ${contentType}`);
                }
                return true;
            } catch (error) {
                console.error('L·ªói ki·ªÉm tra URL ·∫£nh:', error.message);
                return false;
            }
        };

        switch (command) {
            case '/start':
                // G·ª≠i h√¨nh ·∫£nh v·ªõi welcomeMessage l√†m caption
                const imageUrl = 'https://i.ibb.co/H29L7WL/460.jpg';
                const welcomeMessage = `
üíé[TIN888 UY T√çN T·∫†O NI·ªÄM TIN](https://tin888vn.online/)üíé
         Nh√† C√°i Uy T√≠n S·ªë 1 Ch√¢u √Å

‚úÖ ∆ØU ƒêI·ªÇM V∆Ø·ª¢T B·∫¨T C·ª¶A CH√öNG T√îI:

‚≠êÔ∏è ƒê·ªÅ Mi·ªÅn B·∫Øc 1: 99.5
‚≠êÔ∏è ƒê·ªÅ Live 18h25 1:95
‚≠êÔ∏è S·∫£n Ph·∫©m ƒêa D·∫°ng, H·∫•p D·∫´n.
‚≠êÔ∏è Uy T√≠n - R√µ R√†ng - Minh B·∫°ch.
‚≠êÔ∏è N·∫°p R√∫t Nhanh Ch√≥ng, An To√†n B·∫£o M·∫≠t.
‚≠êÔ∏è ƒê·ªôi Ng≈© CSKH H·ªó Chu ƒê√°o, Chuy√™n Nghi·ªáp 24/7
‚≠êÔ∏è Cam K·∫øt Mang ƒê·∫øn Tr·∫£i Nghi·ªám Tuy·ªát V·ªùi Nh·∫•t Cho Kh√°ch H√†ng.

 ‚úÖ H√ÄNG NG√ÄN ∆ØU ƒê√ÉI H·∫§P D·∫™N:

üéÅ Th∆∞·ªüng ch√†o m·ª´ng th√†nh vi√™n m·ªõi ƒë·∫øn 150%.
üéÅ G·ª≠i ti·ªÅn l·∫ßn ƒë·∫ßu nh·∫≠n th∆∞·ªüng l√™n ƒë·∫øn 28.888,000 VNƒê.
üéÅ N·∫°p ti·ªÅn t√≠ch l≈©y nh·∫≠n th∆∞·ªüng l√™n ƒë·∫øn 18,888,888 VNƒê.
üéÅ Si√™u ho√†n tr·∫£ m·ªói ng√†y ƒë·∫øn 2%.
üéÅ Ti·ªÅn th∆∞·ªüng h√†ng ng√†y l√™n ƒë·∫øn: 88,888,888 VNƒê.
üéÅ Hoa h·ªìng ƒë·∫°i l√Ω ƒë·∫øn 65%.
üî• Nhi·ªÅu ∆∞u ƒë√£i c·ª±c kh·ªßng kh√°c [t·∫°i ƒë√¢y](https://tin888.com/promotions)

üåç [H∆°n 90,000 ng∆∞·ªùi ch∆°i tin t∆∞·ªüng tham gia TIN888.](https://tin888vn.online/)
üî• [TIN888](https://tin888vn.online/) B√πng Ch√°y Kh√°t Khao Trong B·∫°n!
üé∞ CH∆†I NGAY - TH·∫ÆNG L·ªöN! ‚§µÔ∏è‚§µÔ∏è
`;
                const inlineKeyboard = {
                    inline_keyboard: [
                        [
                            {
                                text: 'CH∆†I NGAY',
                                url: 'https://tin888vn.online/'
                            }
                        ],
                        [
                            {
                                text: 'LI√äN H·ªÜ CSKH 24/7',
                                url: 'https://t.me/CSKHTIN888/'
                            },
                        ],
                        [
                            {
                                text: 'C·ªòNG ƒê·ªíNG TIN888',
                                url: 'https://t.me/trangchutin888/'
                            },
                        ]
                    ]
                };

                // Ki·ªÉm tra URL ·∫£nh tr∆∞·ªõc khi g·ª≠i
                const isValidImage = await checkImageUrl(imageUrl);
                if (isValidImage) {
                    try {
                        await bot.sendPhoto(chatId, imageUrl, {
                            caption: welcomeMessage.length > 1024 ? welcomeMessage.slice(0, 1024) : welcomeMessage,
                            parse_mode: 'Markdown',
                            reply_markup: inlineKeyboard
                        });
                        // N·∫øu welcomeMessage d√†i h∆°n 1024 k√Ω t·ª±, g·ª≠i ph·∫ßn c√≤n l·∫°i
                        if (welcomeMessage.length > 1024) {
                            await sendLongMessage(chatId, welcomeMessage.slice(1024));
                        }
                    } catch (photoError) {
                        console.error('L·ªói g·ª≠i ·∫£nh:', photoError.message);
                        await bot.sendMessage(chatId, 'Kh√¥ng th·ªÉ g·ª≠i ·∫£nh, nh∆∞ng b·∫°n v·∫´n c√≥ th·ªÉ kh√°m ph√° TIN888!', {
                            parse_mode: 'Markdown',
                            reply_markup: inlineKeyboard
                        });
                        await sendLongMessage(chatId, welcomeMessage);
                    }
                } else {
                    console.log('URL ·∫£nh kh√¥ng h·ª£p l·ªá, g·ª≠i welcomeMessage m√† kh√¥ng c√≥ ·∫£nh');
                    await bot.sendMessage(chatId, welcomeMessage, {
                        parse_mode: 'Markdown',
                        reply_markup: inlineKeyboard
                    });
                }
                break;

            case '/xsmb':
                const xsmbData = await callApi('/xsmb');
                if (!xsmbData || xsmbData.length === 0) {
                    await bot.sendMessage(chatId, 'Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ XSMB.');
                    break;
                }
                const latestResult = xsmbData[0];
                const resultText = `K·∫øt qu·∫£ XSMB ng√†y ${new Date(latestResult.drawDate).toLocaleDateString('vi-VN')}:\n` +
                    `ƒê·∫∑c bi·ªát: ${latestResult.specialPrize[0] || 'Ch∆∞a c√≥'}\n` +
                    `Gi·∫£i nh·∫•t: ${latestResult.firstPrize[0] || 'Ch∆∞a c√≥'}`;
                await bot.sendMessage(chatId, resultText);
                break;

            case '/range':
                if (args.length < 2) {
                    await bot.sendMessage(chatId, 'Vui l√≤ng cung c·∫•p startDate v√† endDate. V√≠ d·ª•: /range 01-05-2025 05-05-2025');
                    break;
                }
                const [startDate, endDate] = args;
                const rangeData = await callApi('/range', { startDate, endDate });
                if (rangeData.error) {
                    await bot.sendMessage(chatId, rangeData.error);
                    break;
                }
                const rangeText = rangeData.map(result =>
                    `Ng√†y ${new Date(result.drawDate).toLocaleDateString('vi-VN')}: ƒê·∫∑c bi·ªát: ${result.specialPrize[0] || 'Ch∆∞a c√≥'}`
                ).join('\n');
                await sendLongMessage(chatId, rangeText || 'Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£.');
                break;

            case '/statistics':
                if (args.length < 1) {
                    await bot.sendMessage(chatId, 'Vui l√≤ng ch·ªçn lo·∫°i th·ªëng k√™: gan, special, dau-duoi, tan-suat-loto. V√≠ d·ª•: /statistics gan 7');
                    break;
                }
                const [statType, days = 7] = args;
                const validStatTypes = ['gan', 'special', 'dau-duoi', 'tan-suat-loto'];
                if (!validStatTypes.includes(statType)) {
                    await bot.sendMessage(chatId, 'Lo·∫°i th·ªëng k√™ kh√¥ng h·ª£p l·ªá. Ch·ªçn: gan, special, dau-duoi, tan-suat-loto.');
                    break;
                }
                const statData = await callApi(`/statistics/${statType}`, { days });
                if (statData.error) {
                    await bot.sendMessage(chatId, statData.error);
                    break;
                }
                const statText = JSON.stringify(statData, null, 2).slice(0, 4000);
                await sendLongMessage(chatId, `Th·ªëng k√™ ${statType} (${days} ng√†y):\n${statText}`);
                break;

            case '/soicau':
                if (args.length < 3) {
                    await bot.sendMessage(chatId, 'Vui l√≤ng cung c·∫•p startDate, endDate v√† days. V√≠ d·ª•: /soicau 01-05-2025 05-05-2025 7');
                    break;
                }
                const [scStartDate, scEndDate, scDays] = args;
                const soicauData = await callApi('/soicau/bach-thu/range', { startDate: scStartDate, endDate: scEndDate, days: scDays });
                if (soicauData.error) {
                    await bot.sendMessage(chatId, soicauData.error);
                    break;
                }
                const soicauText = soicauData.map(result =>
                    `Ng√†y ${result.date}: ${JSON.stringify(result.predictions)}`
                ).join('\n');
                await sendLongMessage(chatId, soicauText || 'Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ soi c·∫ßu.');
                break;

            default:
                await bot.sendMessage(chatId, 'L·ªánh kh√¥ng h·ª£p l·ªá. G√µ /start ƒë·ªÉ xem danh s√°ch l·ªánh.');
        }

        return res.status(200).send('OK');
    } catch (error) {
        console.error('L·ªói x·ª≠ l√Ω webhook Telegram:', error.message);
        if (update?.message?.chat) {
            await bot.sendMessage(update.message.chat.id, 'C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau.');
        }
        return res.status(500).send('Internal Server Error');
    }
});

module.exports = router;