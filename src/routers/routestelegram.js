const express = require('express');
const router = express.Router();
const TelegramBot = require('node-telegram-bot-api');
const NodeCache = require('node-cache');

const token = process.env.TELEGRAM_BOT_TOKEN || 'YOUR_BOT_TOKEN';
const bot = new TelegramBot(token);
const BASE_API_URL = 'https://backendkqxs.onrender.com/api/kqxs'; // ƒê√∫ng v·ªõi c·∫•u h√¨nh API

// Kh·ªüi t·∫°o cache v·ªõi th·ªùi gian s·ªëng (TTL) l√† 1 gi·ªù
const cache = new NodeCache({ stdTTL: 3600 });

// Cache ƒë·ªÉ ngƒÉn l·∫∑p th√¥ng b√°o l·ªói
const errorCache = new NodeCache({ stdTTL: 60 });

// H√†m h·ªó tr·ª£ parse ng√†y
const parseDate = (dateStr) => {
    if (!dateStr || !/^\d{2}-\d{2}-\d{4}$/.test(dateStr)) {
        throw new Error('ƒê·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng DD-MM-YYYY.');
    }
    const [day, month, year] = dateStr.split('-').map(Number);
    if (day < 1 || day > 31 || month < 1 || month > 12 || year < 2000 || year > new Date().getFullYear()) {
        throw new Error('Ng√†y, th√°ng ho·∫∑c nƒÉm kh√¥ng h·ª£p l·ªá.');
    }
    return dateStr;
};

router.post('/', async (req, res) => {
    const update = req.body;
    // Ph·∫£n h·ªìi HTTP 200 ngay ƒë·ªÉ tr√°nh Telegram g·ª≠i l·∫°i c·∫≠p nh·∫≠t
    res.status(200).send('OK');

    try {
        if (!update.message || !update.message.text) {
            console.log('Webhook kh√¥ng c√≥ message ho·∫∑c text');
            return;
        }

        const chatId = update.message.chat.id;
        const messageId = update.message.message_id;
        const text = update.message.text.trim();
        const command = text.split(' ')[0].toLowerCase();
        const args = text.split(' ').slice(1);

        // NgƒÉn x·ª≠ l√Ω tin nh·∫Øn l·∫∑p
        const messageKey = `${chatId}:${messageId}`;
        if (cache.get(messageKey)) {
            console.log(`B·ªè qua tin nh·∫Øn l·∫∑p: ${messageKey}`);
            return;
        }
        cache.set(messageKey, true, 300);

        const sendÔºåÈïøMessage = async (chatId, text) => {
            const maxLength = 4096;
            const messages = [];
            for (let i = 0; i < text.length; i += maxLength) {
                messages.push(text.slice(i, i + maxLength));
            }
            await Promise.all(messages.map(msg => bot.sendMessage(chatId, msg)));
        };

        const callApi = async (endpoint, params = {}) => {
            const query = new URLSearchParams(params).toString();
            const url = `${BASE_API_URL}${endpoint}${query ? '?' + query : ''}`;
            console.log(`G·ªçi API: ${url}`);
            const cacheKey = url;

            const cachedData = cache.get(cacheKey);
            if (cachedData) {
                console.log(`L·∫•y d·ªØ li·ªáu t·ª´ cache: ${cacheKey}`);
                return cachedData;
            }

            const response = await fetch(url, {
                headers: { 'x-user-id': 'bot' },
                method: 'GET',
                signal: AbortSignal.timeout(5000),
            });

            if (response.status !== 200) {
                console.error(`L·ªói API ${url}: ${response.statusText}`);
                throw new Error(`L·ªói khi g·ªçi API ${endpoint}: ${response.statusText}`);
            }

            const data = await response.json();
            if (!data || (Array.isArray(data) && data.length === 0)) {
                throw new Error(`Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu t·ª´ API ${endpoint}`);
            }

            cache.set(cacheKey, data);
            console.log(`L∆∞u cache: ${cacheKey}`);
            return data;
        };

        switch (command) {
            case '/start':
                const imageUrl = 'https://i.ibb.co/H29L7WL/460.jpg';
                const welcomeMessage = `
üíé[TIN888 UY T√çN T·∫†O NI·ªÄM TIN](https://tin888vn.online/)üíé
         Nh√† C√°i Uy T√≠n S·ªë 1 Ch√¢u √Å

‚úÖ ∆ØU ƒêI·ªÇM V∆Ø·ª¢T B·∫¨T C·ª¶A CH√öNG T√îI:

‚≠êÔ∏è ƒê·ªÅ Mi·ªÅn B·∫Øc 1: 99.5
‚≠êÔ∏è ƒê·ªÅ Live 18h25 1:95
‚≠êÔ∏è S·∫£n Ph·∫©m ƒêa D·∫°ng, H·∫•p D·∫´n.
‚≠êÔ∏è Uy T√≠n - R√µ R√†ng - Minh B·∫°ch.
‚≠êÔ∏è N·∫°p R√∫t Nhanh Ch√≥ng, An To√†n B·∫£o M·∫≠t.
‚≠êÔ∏è ƒê·ªôi Ng≈© CSKH H·ªó Chu ƒê√°o, Chuy√™n Nghi·ªáp 24/7
‚≠êÔ∏è Cam K·∫øt Mang ƒê·∫øn Tr·∫£i Nghi·ªám Tuy·ªát V·ªùi Nh·∫•t Cho Kh√°ch H√†ng.

 ‚úÖ H√ÄNG NG√ÄN ∆ØU ƒê√ÉI H·∫§P D·∫™N:

üéÅ Th∆∞·ªüng ch√†o m·ª´ng th√†nh vi√™n m·ªõi ƒë·∫øn 150%.
üéÅ G·ª≠i ti·ªÅn l·∫ßn ƒë·∫ßu nh·∫≠n th∆∞·ªüng l√™n ƒë·∫øn 28.888,000 VNƒê.
üéÅ N·∫°p ti·ªÅn t√≠ch l≈©y nh·∫≠n th∆∞·ªüng l√™n ƒë·∫øn 18,888,888 VNƒê.
üéÅ Si√™u ho√†n tr·∫£ m·ªói ng√†y ƒë·∫øn 2%.
üéÅ Ti·ªÅn th∆∞·ªüng h√†ng ng√†y l√™n ƒë·∫øn: 88,888,888 VNƒê.
üéÅ Hoa h·ªìng ƒë·∫°i l√Ω ƒë·∫øn 65%.
üî• Nhi·ªÅu ∆∞u ƒë√£i c·ª±c kh·ªßng kh√°c [t·∫°i ƒë√¢y](https://tin888.com/promotions)

üåç [H∆°n 90,000 ng∆∞·ªùi ch∆°i tin t∆∞·ªüng tham gia TIN888.](https://tin888vn.online/)
üî• [TIN888](https://tin888vn.online/) B√πng Ch√°y Kh√°t Khao Trong B·∫°n!
üé∞ CH∆†I NGAY - TH·∫ÆNG L·ªöN! ‚§µÔ∏è‚§µÔ∏è
`;
                const inlineKeyboard = {
                    inline_keyboard: [
                        [{ text: 'CH∆†I NGAY', url: 'https://tin888vn.online/' }],
                        [{ text: 'LI√äN H·ªÜ CSKH 24/7', url: 'https://t.me/CSKHTIN888/' }],
                        [{ text: 'C·ªòNG ƒê·ªíNG TIN888', url: 'https://t.me/trangchutin888/' }],
                    ]
                };

                try {
                    await bot.sendPhoto(chatId, imageUrl, {
                        caption: welcomeMessage.length > 1024 ? welcomeMessage.slice(0, 1024) : welcomeMessage,
                        parse_mode: 'Markdown',
                        reply_markup: inlineKeyboard
                    });

                    if (welcomeMessage.length > 1024) {
                        await sendLongMessage(chatId, welcomeMessage.slice(1024));
                    }
                } catch (photoError) {
                    console.error('L·ªói g·ª≠i ·∫£nh:', photoError.message);
                    await bot.sendMessage(chatId, 'Kh√¥ng th·ªÉ g·ª≠i ·∫£nh, nh∆∞ng b·∫°n v·∫´n c√≥ th·ªÉ kh√°m ph√° TIN888!', {
                        parse_mode: 'Markdown',
                        reply_markup: inlineKeyboard
                    });
                    await sendLongMessage(chatId, welcomeMessage);
                }
                break;

            case '/xsmb':
                try {
                    const xsmbData = await callApi('/xsmb');
                    const latestResult = xsmbData[0];
                    const drawDate = new Date(latestResult.drawDate).toLocaleDateString('vi-VN', {
                        day: '2-digit',
                        month: '2-digit',
                        year: 'numeric'
                    });
                    const resultText = `K·∫øt qu·∫£ XSMB ng√†y ${drawDate}:\n` +
                        `ƒê·∫∑c bi·ªát: ${latestResult.specialPrize?.[0] || 'Ch∆∞a c√≥'}\n` +
                        `Gi·∫£i nh·∫•t: ${latestResult.firstPrize?.[0] || 'Ch∆∞a c√≥'}`;
                    await bot.sendMessage(chatId, resultText);
                } catch (error) {
                    console.error('L·ªói l·ªánh /xsmb:', error.message);
                    await bot.sendMessage(chatId, `L·ªói khi l·∫•y k·∫øt qu·∫£ XSMB: ${error.message}`);
                }
                break;

            case '/range':
                if (args.length < 2) {
                    await bot.sendMessage(chatId, 'Vui l√≤ng cung c·∫•p startDate v√† endDate. V√≠ d·ª•: /range 01-05-2025 05-05-2025');
                    break;
                }
                let [startDate, endDate] = args;
                try {
                    startDate = parseDate(startDate);
                    endDate = parseDate(endDate);
                    const rangeData = await callApi('/xsmb/range', { startDate, endDate });
                    const rangeText = rangeData.map(result => {
                        const drawDate = new Date(result.drawDate).toLocaleDateString('vi-VN', {
                            day: '2-digit',
                            month: '2-digit',
                            year: 'numeric'
                        });
                        return `Ng√†y ${drawDate}: ƒê·∫∑c bi·ªát: ${result.specialPrize?.[0] || 'Ch∆∞a c√≥'}`;
                    }).join('\n');
                    await sendLongMessage(chatId, rangeText || 'Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£.');
                } catch (error) {
                    console.error('L·ªói l·ªánh /range:', error.message);
                    await bot.sendMessage(chatId, `L·ªói khi l·∫•y k·∫øt qu·∫£ kho·∫£ng th·ªùi gian: ${error.message}`);
                }
                break;

            case '/statistics':
                if (args.length < 1) {
                    await bot.sendMessage(chatId, 'Vui l√≤ng ch·ªçn lo·∫°i th·ªëng k√™: gan, special, dau-duoi, tan-suat-loto. V√≠ d·ª•: /statistics gan 7');
                    break;
                }
                const [statType, days = 7] = args;
                const validStatTypes = ['gan', 'special', 'dau-duoi', 'tan-suat-loto'];
                if (!validStatTypes.includes(statType)) {
                    await bot.sendMessage(chatId, 'Lo·∫°i th·ªëng k√™ kh√¥ng h·ª£p l·ªá. Ch·ªçn: gan, special, dau-duoi, tan-suat-loto.');
                    break;
                }
                if (!/^\d+$/.test(days) || parseInt(days) < 1) {
                    await bot.sendMessage(chatId, 'S·ªë ng√†y ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng.');
                    break;
                }
                try {
                    const statData = await callApi(`/xsmb/statistics/${statType}`, { days });
                    const statText = JSON.stringify(statData, null, 2).slice(0, 4000);
                    await sendLongMessage(chatId, `Th·ªëng k√™ ${statType} (${days} ng√†y):\n${statText}`);
                } catch (error) {
                    console.error(`L·ªói l·ªánh /statistics ${statType}:`, error.message);
                    await bot.sendMessage(chatId, `L·ªói khi l·∫•y th·ªëng k√™ ${statType}: ${error.message}`);
                }
                break;

            case '/soicau':
                if (args.length < 3) {
                    await bot.sendMessage(chatId, 'Vui l√≤ng cung c·∫•p startDate, endDate v√† days. V√≠ d·ª•: /soicau 01-05-2025 05-05-2025 7');
                    break;
                }
                let [scStartDate, scEndDate, scDays] = args;
                try {
                    scStartDate = parseDate(scStartDate);
                    scEndDate = parseDate(scEndDate);
                    const validDays = [3, 5, 7, 10, 14];
                    if (!validDays.includes(parseInt(scDays))) {
                        await bot.sendMessage(chatId, 'S·ªë ng√†y kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n: 3, 5, 7, 10, 14.');
                        break;
                    }
                    const soicauData = await callApi('/xsmb/soicau/bach-thu/range', { startDate: scStartDate, endDate: scEndDate, days: scDays });
                    const soicauText = soicauData.map(result =>
                        `Ng√†y ${result.date}: ${JSON.stringify(result.predictions)}`
                    ).join('\n');
                    await sendLongMessage(chatId, soicauText || 'Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ soi c·∫ßu.');
                } catch (error) {
                    console.error('L·ªói l·ªánh /soicau:', error.message);
                    await bot.sendMessage(chatId, `L·ªói khi l·∫•y k·∫øt qu·∫£ soi c·∫ßu: ${error.message}`);
                }
                break;

            default:
                await bot.sendMessage(chatId, 'L·ªánh kh√¥ng h·ª£p l·ªá. C√°c l·ªánh kh·∫£ d·ª•ng:\n' +
                    '/start - Xem th√¥ng tin v√† ∆∞u ƒë√£i\n' +
                    '/xsmb - Xem k·∫øt qu·∫£ XSMB m·ªõi nh·∫•t\n' +
                    '/range <startDate> <endDate> - Xem k·∫øt qu·∫£ trong kho·∫£ng th·ªùi gian\n' +
                    '/statistics <type> [days] - Xem th·ªëng k√™ (gan, special, dau-duoi, tan-suat-loto)\n' +
                    '/soicau <startDate> <endDate> <days> - Xem soi c·∫ßu b·∫°ch th·ªß');
        }
    } catch (error) {
        console.error('L·ªói x·ª≠ l√Ω webhook Telegram:', error.message);
        if (update?.message?.chat && !errorCache.get(`${update.message.chat.id}:error`)) {
            await bot.sendMessage(update.message.chat.id, 'C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau.');
            errorCache.set(`${update.message.chat.id}:error`, true, 60);
        }
    }
});

module.exports = router;