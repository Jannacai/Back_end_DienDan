"use strict";

const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');
const moment = require('moment-timezone');
const { authenticate } = require('./auth.routes');
const Chat = require('../../models/groupchat.models');
const User = require('../../models/users.models');
const { broadcastComment } = require('../../websocket');

router.get('/', async (req, res) => {
    try {
        console.log('üì® Fetching group chat messages...');
        const messages = await Chat.find({ isPrivate: false })
            .populate('userId', 'username fullname img role titles points level winCount')
            .sort({ createdAt: -1 }) // Changed back to -1: descending order (newest first, oldest last)
            .limit(50)
            .lean();

        console.log(`‚úÖ Fetched ${messages.length} group chat messages`);
        res.set('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate');
        res.status(200).json({ messages });
    } catch (err) {
        console.error('‚ùå Error in GET /chat:', err.message);
        res.status(500).json({ message: err.message || 'ƒê√£ c√≥ l·ªói khi l·∫•y danh s√°ch tin nh·∫Øn' });
    }
});

router.get('/private/:roomId', authenticate, async (req, res) => {
    try {
        const { roomId } = req.params;
        console.log('üì® Fetching private messages for room:', roomId);

        const [userId1, userId2] = roomId.split('-').map(id => new mongoose.Types.ObjectId(id));
        const messages = await Chat.find({
            isPrivate: true,
            $or: [
                { userId: userId1, receiverId: userId2 },
                { userId: userId2, receiverId: userId1 }
            ]
        })
            .populate('userId', 'username fullname img role titles points level winCount')
            .sort({ createdAt: -1 }) // Changed back to -1: descending order (newest first, oldest last)
            .lean();

        console.log(`‚úÖ Fetched ${messages.length} private messages for room ${roomId}`);
        res.set('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate');
        res.status(200).json({ messages });
    } catch (err) {
        console.error('‚ùå Error in GET /chat/private/:roomId:', err.message);
        res.status(500).json({ message: err.message || 'ƒê√£ c√≥ l·ªói khi l·∫•y tin nh·∫Øn ri√™ng' });
    }
});

router.post('/', authenticate, async (req, res) => {
    try {
        const { content, receiverId } = req.body;
        console.log('üì® Processing new message:', { content: content?.substring(0, 50) + '...', receiverId });

        if (!content || content.trim().length === 0) {
            console.log('‚ùå Empty message content');
            return res.status(400).json({ message: 'N·ªôi dung tin nh·∫Øn l√† b·∫Øt bu·ªôc' });
        }

        // Validate content length
        if (content.length > 1000) {
            console.log('‚ùå Message too long:', content.length);
            return res.status(400).json({ message: 'Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c qu√° 1000 k√Ω t·ª±' });
        }

        // N·∫øu c√≥ receiverId (tin nh·∫Øn ri√™ng)
        if (receiverId) {
            console.log('üîí Processing private message:', {
                senderId: req.user.userId,
                senderRole: req.user.role,
                receiverId,
            });

            // Ki·ªÉm tra vai tr√≤ c·ªßa ng∆∞·ªùi g·ª≠i
            const isSenderAdmin = req.user.role === 'admin' || req.user.role === 'ADMIN';
            if (!isSenderAdmin) {
                // Ng∆∞·ªùi g·ª≠i l√† user, ki·ªÉm tra receiverId ph·∫£i l√† admin
                const receiver = await User.findById(receiverId);
                if (!receiver) {
                    console.log('‚ùå Receiver not found:', receiverId);
                    return res.status(404).json({ message: 'Ng∆∞·ªùi nh·∫≠n kh√¥ng t·ªìn t·∫°i' });
                }
                console.log('Receiver info:', { receiverId, receiverRole: receiver.role });
                const isReceiverAdmin = receiver.role === 'admin' || receiver.role === 'ADMIN';
                if (!isReceiverAdmin) {
                    console.log('‚ùå User cannot send private message to non-admin');
                    return res.status(403).json({ message: 'Ch·ªâ ƒë∆∞·ª£c ph√©p g·ª≠i tin nh·∫Øn ri√™ng t·ªõi admin' });
                }
            }
            // N·∫øu ng∆∞·ªùi g·ª≠i l√† admin, cho ph√©p g·ª≠i t·ªõi b·∫•t k·ª≥ ai
        }

        // T·∫°o tin nh·∫Øn m·ªõi
        const message = new Chat({
            userId: new mongoose.Types.ObjectId(req.user.userId),
            receiverId: receiverId ? new mongoose.Types.ObjectId(receiverId) : null,
            content: content.trim(),
            createdAt: moment.tz('Asia/Ho_Chi_Minh').toDate(),
            isPrivate: !!receiverId,
        });

        console.log('üíæ Saving message to database...');
        await message.save();
        console.log('‚úÖ Message saved with ID:', message._id);

        // Populate message v·ªõi th√¥ng tin user
        const populatedMessage = await Chat.findById(message._id)
            .populate('userId', 'username fullname img role titles points level winCount')
            .lean();

        console.log('üì° Broadcasting message...');

        if (receiverId) {
            // Private message
            const roomId = [req.user.userId, receiverId].sort().join('-');
            console.log('üîí Broadcasting PRIVATE_MESSAGE to room:', roomId);

            broadcastComment({
                type: 'PRIVATE_MESSAGE',
                data: {
                    ...populatedMessage,
                    roomId,
                    senderId: req.user.userId,
                    receiverId
                },
                room: roomId
            });
        } else {
            // Group message
            console.log('üí¨ Broadcasting NEW_MESSAGE to chat room');

            broadcastComment({
                type: 'NEW_MESSAGE',
                data: populatedMessage,
                room: 'chat'
            });
        }

        console.log('‚úÖ Message broadcasted successfully');
        res.set('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate');
        res.status(200).json({
            message: 'G·ª≠i tin nh·∫Øn th√†nh c√¥ng',
            chat: populatedMessage
        });
    } catch (err) {
        console.error('‚ùå Error in POST /chat:', err.message);
        res.status(500).json({ message: err.message || 'ƒê√£ c√≥ l·ªói khi g·ª≠i tin nh·∫Øn' });
    }
});

module.exports = router;